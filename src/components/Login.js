import React, { useContext, useEffect, useState } from "react";
import { ITopContext } from "../hooks/TopContext";
import { DefButton, DefInput, DefMenus, Footer, Logo } from "./ComponentList";
import { useNavigate } from "react-router-dom";
import Car from "./Car";
import Registration from "./Registration";
// import { ServiceLayer_API } from "./DMF_SAP_API/ServiceLayer_API/";
// import { LoginAPI } from "./DMF_SAP_API/ServiceLayer_API";
export default function Header() {
  const [userToLogin, setUserTologin] = useState({
    id: 0,
    username: "",
    password: "",
  });
  const LoginInfo = (val) => {
    const { name, value } = val.target;
    setUserTologin((preState) => ({ ...preState, [name]: value }));
    // console.log(value);
  };
  const [logedUser, setlogedUser] = useState({
    ID: -100,
  });
  const [iModuleShow, setIModuleShow] = useState(false);

  const {
    setuserid,
    setPop,
    setpopLabel,
    setpopTitle,
    setUserInfo,
    setModule,
    qrInfo,
    setQrInfo,
    setPopLoadBol,
    setloading,
    setCanNavigate,
  } = useContext(ITopContext);

  const LogMeInWithQR = async (prop) => {
    setPopLoadBol(true);
    const newData = await fetch("/userLogin", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accpet: "application/json",
      },
      body: JSON.stringify({
        ...prop,
      }),
    })
      .then((res) => res.json())
      .catch((err) => {
        setpopTitle("Connection Error");
        setpopLabel(err.message);
        setPop(true);
        setPopLoadBol(false);
        return;
      });

    setPopLoadBol(false);
    setlogedUser(newData[0]);
    // ////console.log(newData);
    if (newData[0].ID === 0) {
      setpopTitle("Incorect Credentials");
      setpopLabel("Either the email/username or password is incorrect");
      setPop(true);
      return;
    }
    setUserInfo(newData[0]);
    setuserid(newData[0].ID);
    setModule(1);
  };

  const logMeIn = async () => {
    console.log(userToLogin);
    setPopLoadBol(true);
    setloading(true);
    const newData = await fetch("/userLogin", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accpet: "application/json",
      },
      body: JSON.stringify({
        ...userToLogin,
      }),
    })
      .then((res) => res.json())
      .catch((err) => {
        setpopTitle("Connection Error");
        setpopLabel(err.message);
        setPop(true);
        setPopLoadBol(false);
        setloading(false);

        return;
      });

    if (newData[0].ID === 0) {
      setpopTitle("Incorect Credentials");
      setpopLabel("Either the email/username or password is incorrect");
      setPop(true);
      setloading(true);

      return;
    }
    setloading(false);

    setPopLoadBol(false);
    setUserInfo(newData[0]);
    setuserid(newData[0].ID);
    setModule(1);
    handleLoginPush();
    setCanNavigate(false);
  };
  const menus = [
    {
      id: 0,
      text: "Login",
    },
    {
      id: 1,
      text: "Register",
    },
    {
      id: 2,
      text: "Help",
    },
  ];
  const [SelectedMenuId, setSelectedMenuId] = useState(0);

  const getUserByQR = async () => {
    try {
      const iGetPoBom = await fetch("EXEC", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accpet: "application/json",
        },
        body: JSON.stringify({
          SQLID: 6,
          DOCNUM: qrInfo.data,
        }),
      }).then((res) => res.json());

      setUserTologin(iGetPoBom[0]);
      setlogedUser(iGetPoBom[0].id);
      setQrInfo({ type: "", data: "" });
      if (iGetPoBom[0].id > 0) {
        LogMeInWithQR(iGetPoBom[0]);
      }
    } catch (error) {
      ////console.log(error);
    }
  };

  let history = useNavigate();
  function handleLoginPush() {
    history("/home");
    ////console.log("pushed");
  }
  const keypressHandler = (e) => {
    // console.log(e.key)
    if (e.key == "Enter") {
      logMeIn();
    }
  };
  useEffect(() => {
    setloading(!true);
    console.log("loading");
  }, []);
  useEffect(() => {
    setIModuleShow(true);
    return;
  }, [iModuleShow]);
  useEffect(() => {
    if (!(qrInfo.data === "")) {
      getUserByQR();
    }
  }, [qrInfo.data]);

  //
  return (
    <div className="bg-transparent">
      <br></br>
      <br></br>
      <br></br>
      <div
        style={{
          width: "325px",
          // border: "1px #21262d solid",
        }}
        className="mx-auto mt-10 px-4"
      >
        <DefMenus
          menus={menus}
          SelectedMenuId={SelectedMenuId}
          setSelectedMenuId={setSelectedMenuId}
        />
      </div>
      {SelectedMenuId == 0 && (
        <>
          <div className="">
            <div
              style={{
                width: "308px",
                // border: "1px #21262d solid",
              }}
              className=" frame mx-auto  "
            >
              <DefInput
                id="username"
                handler={LoginInfo}
                type="text"
                Lcss="mb-1"
                label="Username"
                className="bg-trans20"
                onKeyUp={keypressHandler}
              />
              <div>
                <DefInput
                  id="password"
                  handler={LoginInfo}
                  type="password"
                  label="Password"
                  onKeyUp={keypressHandler}
                  className="bg-trans20"
                />
              </div>
              <div className="flex">
                <DefButton
                  text="Sign in"
                  onClick={logMeIn}
                  css="my-3"
                  type="4"
                  className=" mx-auto  px-2 btn-primary  w-full "
                />
              </div>

              {/* <DefButton
              text="API Submit"
              onClick={logMeInApi}
              css="my-3"
              type={"7"}
              classNam=""
            /> */}
            </div>
          </div>
        </>
      )}
      {SelectedMenuId == 1 && <Registration />}

      <Footer />

      <div className=" fixed w-full bottom-0">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1346 62">
          <path
            fill="#fafbfb"
            stroke="#fafbfb"
            d="M32.24 8.696c-1.793.992-5.115 3.144-7.382 4.781-4.795 3.464-10.197 3.936-13.937 1.217l-5.819-4.227C3.233 9.11 1.321 8 .852 8 .383 8 0 20.15 0 35.001v27l673.25-.25 673.25-.251.266-27.079.266-27.079-3.266.448c-1.796.247-5.632 2.253-8.525 4.458-6.786 5.173-11.134 5.484-17.196 1.231-8.08-5.67-9.42-6.153-15.279-5.508-3.992.439-6.388 1.376-8.868 3.467-7.794 6.572-12.283 6.666-20.49.431-7.437-5.65-14.693-5.625-22.332.075-7.856 5.86-14.491 6.086-19.003.645-5.51-6.644-16.808-6.433-24.749.462-6.079 5.279-9.918 4.843-19.98-2.268-5.766-4.075-13.911-4.155-18.912-.186-6.616 5.252-7.414 5.659-11.296 5.761-2.76.072-5.042-.74-8.091-2.879-8.08-5.67-9.42-6.153-15.279-5.508-3.992.439-6.388 1.376-8.868 3.467-7.692 6.485-11.445 6.528-19.748.225-7.308-5.546-13.756-5.823-20.299-.869-9.676 7.326-13.306 7.535-21.678 1.244-8.501-6.388-13.839-6.466-21.891-.32-8.524 6.507-12.54 6.339-22.133-.924-6.547-4.956-12.994-4.678-20.299.876-8.561 6.509-12.591 6.415-21.174-.492-7.322-5.892-12.828-5.358-23.727 2.301-5.578 3.92-10.526 3.887-15.548-.1-6.803-5.402-7.631-5.778-12.838-5.828-4.214-.041-6.016.519-9.477 2.949-10.867 7.627-14.007 7.915-21.159 1.939-8.163-6.82-15.691-6.82-23.854 0-7.152 5.976-10.292 5.688-21.159-1.939-6.687-4.694-12.957-4.253-20.323 1.429-7.148 5.515-11.364 5.888-17.546 1.55-12.223-8.577-14.867-8.577-27.09 0-6.182 4.338-10.398 3.965-17.546-1.55-7.562-5.833-13.89-6.183-20.558-1.135-9.138 6.919-15.457 7.448-20.817 1.742-6.225-6.626-14.784-6.827-23.146-.544-8.542 6.418-10.935 6.256-21.974-1.492-6.594-4.628-12.972-4.239-20.064 1.223-8.524 6.567-12.468 6.461-21.205-.57-6.636-5.339-14.062-5.359-20.105-.054-7.872 6.912-12.874 7.045-21.39.571-7.305-5.554-13.752-5.832-20.299-.876-9.794 7.415-13.611 7.578-21.953.936-6.872-5.472-13.208-5.866-19.812-1.23-11.039 7.748-13.432 7.91-21.974 1.492-8.548-6.423-14.985-6.282-23.108.505-6.898 5.763-11.93 5.44-20.306-1.301-6.942-5.587-13.017-5.365-21.198.776-8.257 6.198-12.416 6.193-19.936-.021-7.508-6.204-14.811-6.294-21.953-.271-7.527 6.347-13.275 6.331-20.738-.057-7.236-6.194-14.469-5.825-23.175 1.181-6.917 5.567-10.068 5.218-20.784-2.304-6.185-4.341-13.317-4.213-18.636.335-8.346 7.137-13.089 7.482-20.898 1.521-8.932-6.818-14.46-6.852-23.157-.143-7.458 5.755-11.971 5.75-19.217-.019-8.094-6.445-14.567-6.742-21.704-.998-8.559 6.888-12.597 6.978-21.152.474-7.107-5.404-13.501-5.776-20.064-1.17-11.023 7.737-13.438 7.906-21.913 1.538-8.501-6.388-13.839-6.466-21.891-.32-8.405 6.416-12.344 6.38-20.949-.19-7.616-5.815-16.326-5.422-22.367 1.008-5.282 5.623-12.2 5.152-20.321-1.383-6.636-5.339-14.062-5.359-20.105-.054-7.798 6.847-12.889 7.033-21.128.773-6.293-4.78-12.275-5.887-17.172-3.176M.439 35c0 15.125.139 21.313.309 13.75.169-7.562.169-19.937 0-27.5C.578 13.688.439 19.875.439 35"
            fill-rule="evenodd"
          />
          <path
            fill="#045354"
            stroke="#045354"
            d="M0 34.974V62h673.031c541.942 0 673.126-.247 673.517-1.266.268-.696.366-13.029.219-27.407l-.267-26.142-3.5 1.212c-1.925.666-5.672 2.875-8.327 4.907-6.864 5.256-11.663 5.177-18.293-.302-8.051-6.653-15.242-6.671-23.546-.059-7.049 5.612-11.383 5.616-18.887.017-8.391-6.26-15.036-6.627-21.805-1.203-9.302 7.454-12.321 7.294-24.04-1.273-4.685-3.425-11.519-3.425-16.204 0-11.884 8.687-14.298 8.777-24.6.914-7.143-5.453-12.698-4.896-22 2.204-6.305 4.813-11.491 4.749-17.431-.213-8.93-7.461-15.804-7.461-24.734 0-5.826 4.868-10.258 4.925-16.431.213-9.302-7.1-14.857-7.657-22-2.204-8.615 6.576-13.065 7.314-18.804 3.118-7.839-5.731-9.478-6.509-13.714-6.512-4.831-.004-6.49.716-12.886 5.598-6.845 5.225-10.844 4.785-20-2.204-7.14-5.45-12.814-4.872-22.192 2.26-6.322 4.809-10.936 4.638-17.996-.667-8.9-6.688-14.592-6.712-23.35-.1-7.184 5.424-11.653 5.6-18.058.711-9.302-7.1-14.857-7.657-22-2.204-8.615 6.576-13.065 7.314-18.804 3.118-7.922-5.791-9.454-6.509-13.898-6.509-4.444 0-5.976.718-13.898 6.509-5.739 4.196-10.189 3.458-18.804-3.118-7.143-5.453-12.698-4.896-22 2.204-6.46 4.932-10.87 4.725-18.207-.852-8.159-6.202-15.225-6.202-23.014 0-7.026 5.594-11.715 5.828-18.183.908-9.378-7.132-15.052-7.71-22.192-2.26-9.156 6.989-13.155 7.429-20 2.204-6.396-4.882-8.055-5.602-12.886-5.598-4.236.003-5.875.781-13.714 6.512-5.739 4.196-10.189 3.458-18.804-3.118-7.179-5.48-12.686-4.906-22.139 2.311-6.009 4.587-12.021 4.375-17.715-.624-8.209-7.208-14.295-7.065-24.338.573-6.063 4.612-11.149 4.612-17.212 0-9.378-7.132-15.052-7.71-22.192-2.26-9.156 6.989-13.155 7.429-20 2.204-9.302-7.1-14.857-7.657-22-2.204-8.615 6.576-13.065 7.314-18.804 3.118-7.839-5.731-9.478-6.509-13.714-6.512-4.831-.004-6.49.716-12.886 5.598-6.845 5.225-10.844 4.785-20-2.204-7.14-5.45-12.814-4.872-22.192 2.26-6.421 4.884-11.168 4.677-18.031-.787-8.447-6.726-15.247-6.698-23.434.096-6.516 5.409-11.457 5.583-17.939.635-6.396-4.882-8.055-5.602-12.886-5.598-4.236.003-5.875.781-13.714 6.512-5.739 4.196-10.189 3.458-18.804-3.118-7.143-5.453-12.698-4.896-22 2.204-6.845 5.225-10.844 4.785-20-2.204-7.14-5.45-12.814-4.872-22.192 2.26-5.959 4.533-11.239 4.61-16.718.245-9.795-7.804-16.62-8.029-24.832-.818-5.694 4.999-11.706 5.211-17.715.624-9.453-7.217-14.96-7.791-22.139-2.311-8.615 6.576-13.065 7.314-18.804 3.118-7.958-5.817-9.444-6.509-14-6.512-3.327-.003-5.544.685-8 2.48-11.884 8.687-14.298 8.777-24.6.914-7.14-5.45-12.814-4.872-22.192 2.26-6.823 5.19-10.687 4.727-20.113-2.408-6.903-5.226-13.859-4.545-21.86 2.139-5.9 4.929-11.007 5.009-17.239.269-9.378-7.132-15.052-7.71-22.192-2.26C19.36 18.528 12.301 18.887 7 12.5c-.745-.898-2.625-2.289-4.177-3.092L0 7.949v27.025M.439 35c0 15.125.139 21.313.309 13.75.169-7.562.169-19.937 0-27.5C.578 13.688.439 19.875.439 35"
            fill-rule="evenodd"
          />
        </svg>
      </div>

      <div className=" fixed w-full top-0 rotate-180">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1346 62">
          <path
            fill="#fafbfb"
            stroke="#fafbfb"
            d="M32.24 8.696c-1.793.992-5.115 3.144-7.382 4.781-4.795 3.464-10.197 3.936-13.937 1.217l-5.819-4.227C3.233 9.11 1.321 8 .852 8 .383 8 0 20.15 0 35.001v27l673.25-.25 673.25-.251.266-27.079.266-27.079-3.266.448c-1.796.247-5.632 2.253-8.525 4.458-6.786 5.173-11.134 5.484-17.196 1.231-8.08-5.67-9.42-6.153-15.279-5.508-3.992.439-6.388 1.376-8.868 3.467-7.794 6.572-12.283 6.666-20.49.431-7.437-5.65-14.693-5.625-22.332.075-7.856 5.86-14.491 6.086-19.003.645-5.51-6.644-16.808-6.433-24.749.462-6.079 5.279-9.918 4.843-19.98-2.268-5.766-4.075-13.911-4.155-18.912-.186-6.616 5.252-7.414 5.659-11.296 5.761-2.76.072-5.042-.74-8.091-2.879-8.08-5.67-9.42-6.153-15.279-5.508-3.992.439-6.388 1.376-8.868 3.467-7.692 6.485-11.445 6.528-19.748.225-7.308-5.546-13.756-5.823-20.299-.869-9.676 7.326-13.306 7.535-21.678 1.244-8.501-6.388-13.839-6.466-21.891-.32-8.524 6.507-12.54 6.339-22.133-.924-6.547-4.956-12.994-4.678-20.299.876-8.561 6.509-12.591 6.415-21.174-.492-7.322-5.892-12.828-5.358-23.727 2.301-5.578 3.92-10.526 3.887-15.548-.1-6.803-5.402-7.631-5.778-12.838-5.828-4.214-.041-6.016.519-9.477 2.949-10.867 7.627-14.007 7.915-21.159 1.939-8.163-6.82-15.691-6.82-23.854 0-7.152 5.976-10.292 5.688-21.159-1.939-6.687-4.694-12.957-4.253-20.323 1.429-7.148 5.515-11.364 5.888-17.546 1.55-12.223-8.577-14.867-8.577-27.09 0-6.182 4.338-10.398 3.965-17.546-1.55-7.562-5.833-13.89-6.183-20.558-1.135-9.138 6.919-15.457 7.448-20.817 1.742-6.225-6.626-14.784-6.827-23.146-.544-8.542 6.418-10.935 6.256-21.974-1.492-6.594-4.628-12.972-4.239-20.064 1.223-8.524 6.567-12.468 6.461-21.205-.57-6.636-5.339-14.062-5.359-20.105-.054-7.872 6.912-12.874 7.045-21.39.571-7.305-5.554-13.752-5.832-20.299-.876-9.794 7.415-13.611 7.578-21.953.936-6.872-5.472-13.208-5.866-19.812-1.23-11.039 7.748-13.432 7.91-21.974 1.492-8.548-6.423-14.985-6.282-23.108.505-6.898 5.763-11.93 5.44-20.306-1.301-6.942-5.587-13.017-5.365-21.198.776-8.257 6.198-12.416 6.193-19.936-.021-7.508-6.204-14.811-6.294-21.953-.271-7.527 6.347-13.275 6.331-20.738-.057-7.236-6.194-14.469-5.825-23.175 1.181-6.917 5.567-10.068 5.218-20.784-2.304-6.185-4.341-13.317-4.213-18.636.335-8.346 7.137-13.089 7.482-20.898 1.521-8.932-6.818-14.46-6.852-23.157-.143-7.458 5.755-11.971 5.75-19.217-.019-8.094-6.445-14.567-6.742-21.704-.998-8.559 6.888-12.597 6.978-21.152.474-7.107-5.404-13.501-5.776-20.064-1.17-11.023 7.737-13.438 7.906-21.913 1.538-8.501-6.388-13.839-6.466-21.891-.32-8.405 6.416-12.344 6.38-20.949-.19-7.616-5.815-16.326-5.422-22.367 1.008-5.282 5.623-12.2 5.152-20.321-1.383-6.636-5.339-14.062-5.359-20.105-.054-7.798 6.847-12.889 7.033-21.128.773-6.293-4.78-12.275-5.887-17.172-3.176M.439 35c0 15.125.139 21.313.309 13.75.169-7.562.169-19.937 0-27.5C.578 13.688.439 19.875.439 35"
            fill-rule="evenodd"
          />
          <path
            fill="#045354"
            stroke="#045354"
            d="M0 34.974V62h673.031c541.942 0 673.126-.247 673.517-1.266.268-.696.366-13.029.219-27.407l-.267-26.142-3.5 1.212c-1.925.666-5.672 2.875-8.327 4.907-6.864 5.256-11.663 5.177-18.293-.302-8.051-6.653-15.242-6.671-23.546-.059-7.049 5.612-11.383 5.616-18.887.017-8.391-6.26-15.036-6.627-21.805-1.203-9.302 7.454-12.321 7.294-24.04-1.273-4.685-3.425-11.519-3.425-16.204 0-11.884 8.687-14.298 8.777-24.6.914-7.143-5.453-12.698-4.896-22 2.204-6.305 4.813-11.491 4.749-17.431-.213-8.93-7.461-15.804-7.461-24.734 0-5.826 4.868-10.258 4.925-16.431.213-9.302-7.1-14.857-7.657-22-2.204-8.615 6.576-13.065 7.314-18.804 3.118-7.839-5.731-9.478-6.509-13.714-6.512-4.831-.004-6.49.716-12.886 5.598-6.845 5.225-10.844 4.785-20-2.204-7.14-5.45-12.814-4.872-22.192 2.26-6.322 4.809-10.936 4.638-17.996-.667-8.9-6.688-14.592-6.712-23.35-.1-7.184 5.424-11.653 5.6-18.058.711-9.302-7.1-14.857-7.657-22-2.204-8.615 6.576-13.065 7.314-18.804 3.118-7.922-5.791-9.454-6.509-13.898-6.509-4.444 0-5.976.718-13.898 6.509-5.739 4.196-10.189 3.458-18.804-3.118-7.143-5.453-12.698-4.896-22 2.204-6.46 4.932-10.87 4.725-18.207-.852-8.159-6.202-15.225-6.202-23.014 0-7.026 5.594-11.715 5.828-18.183.908-9.378-7.132-15.052-7.71-22.192-2.26-9.156 6.989-13.155 7.429-20 2.204-6.396-4.882-8.055-5.602-12.886-5.598-4.236.003-5.875.781-13.714 6.512-5.739 4.196-10.189 3.458-18.804-3.118-7.179-5.48-12.686-4.906-22.139 2.311-6.009 4.587-12.021 4.375-17.715-.624-8.209-7.208-14.295-7.065-24.338.573-6.063 4.612-11.149 4.612-17.212 0-9.378-7.132-15.052-7.71-22.192-2.26-9.156 6.989-13.155 7.429-20 2.204-9.302-7.1-14.857-7.657-22-2.204-8.615 6.576-13.065 7.314-18.804 3.118-7.839-5.731-9.478-6.509-13.714-6.512-4.831-.004-6.49.716-12.886 5.598-6.845 5.225-10.844 4.785-20-2.204-7.14-5.45-12.814-4.872-22.192 2.26-6.421 4.884-11.168 4.677-18.031-.787-8.447-6.726-15.247-6.698-23.434.096-6.516 5.409-11.457 5.583-17.939.635-6.396-4.882-8.055-5.602-12.886-5.598-4.236.003-5.875.781-13.714 6.512-5.739 4.196-10.189 3.458-18.804-3.118-7.143-5.453-12.698-4.896-22 2.204-6.845 5.225-10.844 4.785-20-2.204-7.14-5.45-12.814-4.872-22.192 2.26-5.959 4.533-11.239 4.61-16.718.245-9.795-7.804-16.62-8.029-24.832-.818-5.694 4.999-11.706 5.211-17.715.624-9.453-7.217-14.96-7.791-22.139-2.311-8.615 6.576-13.065 7.314-18.804 3.118-7.958-5.817-9.444-6.509-14-6.512-3.327-.003-5.544.685-8 2.48-11.884 8.687-14.298 8.777-24.6.914-7.14-5.45-12.814-4.872-22.192 2.26-6.823 5.19-10.687 4.727-20.113-2.408-6.903-5.226-13.859-4.545-21.86 2.139-5.9 4.929-11.007 5.009-17.239.269-9.378-7.132-15.052-7.71-22.192-2.26C19.36 18.528 12.301 18.887 7 12.5c-.745-.898-2.625-2.289-4.177-3.092L0 7.949v27.025M.439 35c0 15.125.139 21.313.309 13.75.169-7.562.169-19.937 0-27.5C.578 13.688.439 19.875.439 35"
            fill-rule="evenodd"
          />
        </svg>
      </div>
    </div>
  );
}
